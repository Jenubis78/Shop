@page "/product/{id:int}"
@using System.Runtime.CompilerServices


@inject IProductService ProductService

@if (product == null && message == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (message != null)
{
    <MudText Typo="Typo.h1">Le produit n'existe pas !</MudText>
}
else
{
    
            
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                
                <MudGrid>
                    <MudItem xs="12" Class="align-center justify-center">
                        <MudContainer MaxWidth="MaxWidth.Small">
                        <MudImage ObjectPosition="ObjectPosition.Center" Src=@product.ImageUrl Width="400" Height="600" Class="rounded-lg ma-4 justify-content-center"/>
                            </MudContainer>
                    </MudItem>
                    <MudItem xs="12" Class="align-center"  >
                    <MudText Typo="Typo.h3" Align="Align.Center">@product.Title</MudText>
                    <MudText Typo="Typo.body1">@product.Description</MudText>
            </MudItem>
                        @if (product.Variants != null && product.Variants.Count > 0)
                        { 
                            <MudItem xs="12">
                                <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                                    <MudSelectExtended T="int" @bind-Value="currentTypeId">

                                        @foreach (var variant in product.Variants)
                                        {
                                            <MudSelectItemExtended Value="@variant.ProductTypeId" Text=@($"{variant.ProductType.Name}              ")/>


                                        }
                                    </MudSelectExtended>
                                </MudContainer>
                            </MudItem>
                            
                        }
                        <MudItem xs="12">
                        @if (GetSelectedVariant() != null)
                        {
                            @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                            {
                            <MudText Align="Align.Center" Color="Color.Dark" Style="text-decoration: line-through">Original Price : @GetSelectedVariant().OriginalPrice</MudText>
                            }
                        }
                        <MudText Align="Align.Center" Typo="Typo.h6" Color="Color.Success">Price : @GetSelectedVariant().Price</MudText>

                            </MudItem>





            </MudGrid>
    </MudPaper>
}

@code {
    private Product? product = null;
    private string? message;

    private int currentTypeId = 1;
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        var result = await ProductService.GetProduct(Id);
        product = result.Data;
        if (!result.Success)
        {
            message = result.Message;

        }
        else
        {
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
                product = result.Data;
            }
        }

    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

}
